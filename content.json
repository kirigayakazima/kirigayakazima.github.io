{"meta":{"title":"我的博客","subtitle":"","description":"个人博客、kirigayakazima","author":"xuaner","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2022-11-26T11:21:45.716Z","updated":"2022-11-26T11:21:45.716Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2022-11-26T11:23:35.091Z","updated":"2022-11-26T11:23:35.091Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-11-26T13:14:18.757Z","updated":"2022-11-26T13:14:18.757Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":"","author":"xuaner"},{"title":"","date":"2022-11-26T14:02:29.242Z","updated":"2022-11-26T14:02:29.242Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"欢迎你"},{"title":"所有标签","date":"2022-11-26T11:25:18.529Z","updated":"2022-11-26T11:25:18.529Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"常见电路","slug":"常见电路","date":"2022-12-22T07:36:15.000Z","updated":"2022-12-22T07:39:58.031Z","comments":true,"path":"2022/12/22/常见电路/","link":"","permalink":"http://example.com/2022/12/22/%E5%B8%B8%E8%A7%81%E7%94%B5%E8%B7%AF/","excerpt":"","text":"4选一​ 123456789101112131415161718192021222324252627282930//两种，一种使用assign赋值语句，用三目运算符嵌套，不便于阅读`timescale 1ns/1nsmodule mux4_1(input [1:0]d1,d2,d3,d0,input [1:0]sel,output [1:0]mux_out);assign mux_out = (sel == 2&#x27;b00) ? d3 : ((sel == 2&#x27;b01) ? d2 : (sel == 2&#x27;b10) ? d1 : d0);endmodule//使用case语句`timescale 1ns/1nsmodule mux4_1(input [1:0]d1,d2,d3,d0,input [1:0]sel,output [1:0]mux_out);reg [1:0] mux_out_reg;always @ (*)begin case(sel) 2&#x27;b00:mux_out_reg = d3; 2&#x27;b01:mux_out_reg = d2; 2&#x27;b10:mux_out_reg = d1; 2&#x27;b11:mux_out_reg = d0; default : mux_out_reg = d0; endcaseendassign mux_out = mux_out_reg;endmodule ‍","categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"},{"name":"常见器件","slug":"数字IC/常见器件","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/%E5%B8%B8%E8%A7%81%E5%99%A8%E4%BB%B6/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"Verilog","slug":"Verilog","permalink":"http://example.com/tags/Verilog/"},{"name":"常见器件","slug":"常见器件","permalink":"http://example.com/tags/%E5%B8%B8%E8%A7%81%E5%99%A8%E4%BB%B6/"}],"author":"xuaner"},{"title":"芯动力——同步时序电路","slug":"芯动力——同步时序电路","date":"2022-12-14T12:41:35.000Z","updated":"2022-12-14T12:42:54.166Z","comments":true,"path":"2022/12/14/芯动力——同步时序电路/","link":"","permalink":"http://example.com/2022/12/14/%E8%8A%AF%E5%8A%A8%E5%8A%9B%E2%80%94%E2%80%94%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF/","excerpt":"","text":"同步电路设计同步时钟电路的优点： 在同步设计中，EDA工具可以保证电路系统的时序收敛，有效避免了电路设计中竞争冒险现象。 由于触发器只有在时钟边缘才改变取值，很大限度地减少了整个电路受毛刺和噪声影响的可能。 亚稳态 亚稳态是指触发器无法在某个规定时间段内达到一个可确认的状态。 当一个触发器进入亚稳态时，既无法预测该单元的输出电平，也无法预测何时输出才能稳定在某个正确的电平上。（电路在翻转的时候） 在这个期间，触发器输出一当中间级电平，或者可能处于振荡状态，并且这种无用的输出电平可以沿信号通道上的各个触发器级联式传播下去。 亚稳态不能从根本上消除，但是可以降低影响 $MTBF&#x3D;\\frac{e^{t_{MET}&#x2F;C_2}}{C_1f_{CLK}f_{DATA}}$​ tMEF寄存器从时钟上升沿触发后的时序余量时间 指正常没有亚稳态情况下，寄存器输出信号从源寄存器到目的寄存器的建立时间余量。fCLK接收时钟域的时钟频率fDATA数据的变化频率C1、C2与器件有关的参数 为了避免上节所述的亚稳态问题，就应当使参数MTBF​尽可能的大，通常采用的方法是双锁存器法，即在一个信号进入另一个时钟域之前，将该信号用两个锁存器连续锁存两次，最后得到的采样结果就可以消除亚稳态问题。 ​ 优缺点​ 结构简单、易实现。 增加了两级触发器延时 当快时钟域转到慢时钟域时，易造成慢时钟采样丢失（还未来得及采样，数据就变化了）。故常用于慢时钟域转到快时钟域 两级触发器已经将MTBF变得足够大 三级或者更多级虽然能将亚稳态出现概率降得更低，但是影响电路效率 边沿检测同步器从慢时钟转变为快时钟 适用条件： 输入数据的宽度必须比一个接受时钟周期加上一个同步触发器的old时间要长，最安全的就是两个同步周期宽度。 ​ ‍ 脉冲同步器从快时钟变为慢时钟 ​ 同步器比较 类型 应用 输入 输出 限制 电平检测 同步电平信号时钟域任何时钟域的传输 电平 电平 输入信号必须保持两个接受时钟周期宽度每一次同步之后输入信号必须恢复到无效状态 边沿检测 检测输入信号的上升沿和下降沿适用于低频时钟域向高频时钟域传输 电平或脉冲 脉冲 输入信号必须保持两个接受时钟周期宽度 脉冲检测 同步单周期脉冲信号适用于高频时钟域向低频时钟域传输 脉冲 脉冲 输入的脉冲时间的距离必须保持两个接收时钟周期以上 ‍","categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"时序","slug":"时序","permalink":"http://example.com/tags/%E6%97%B6%E5%BA%8F/"}],"author":"xuaner"},{"title":"Markdown语法","slug":"Markdown语法","date":"2022-12-04T12:20:02.000Z","updated":"2022-12-14T12:40:07.303Z","comments":true,"path":"2022/12/04/Markdown语法/","link":"","permalink":"http://example.com/2022/12/04/Markdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题123# 一级标题## 二级标题### 三级标题 列表123456+ 无序列表1+ 无序列表2- 无序列表3- 无序列表4* 无序列表5* 无序列表6 121. 有序列表12. 有序列表2 123* [ ] 任务列表1* [ ] 任务列表2* [ ] 任务列表3 块123456‍``` 代码块‍````标记块`&gt; 引述 超链接1![可选](url) 图片超链接 上下标1234567891011直接写在内容中,只取``中间内容下标:`$a_2$` 上标:`$a^2$`html格式,需要转义下标：a&lt;sub&gt;2&lt;/sub&gt;上标：a&lt;sup&gt;2&lt;/sup&gt;Markdown自带,推荐下标 ：θ~1~ 上标 ：θ^2^ 表格1234567891011| 符号 | 功能 || :----: | :----------------: || * | 零次或多次 || + | 一次或多次 || ？ | 零次或一次 || ^ | 匹配字符串开头 || $ | 匹配字符串结尾 || \\s | 表示空格 || . | 匹配任意一个字符 || \\w | 匹配一个字符 || \\d | 匹配一个数字 | 数学公式123$$中间写公式$$ 四则运算123&#123;&#125; 复合标t_ &#123;a0&#125;\\frac&#123;分子&#125;&#123;分母&#125; 分式表达 Emoji表情123`:中间填入对应的字符:``:sneezing_face:`:sneezing_face: 🤧 或者使用win + .​调出emoji​表情 表情 代码 表情 代码 表情 代码 🤧 :sneezing_face:​ 🤶 :mrs_claus:​ 🍈 :melon:​ 😠 :angry:​ 🤓 :nerd_face:​ 🥝 :kiwi_fruit:​ 👼 :angle:​ 😣 :persevere:​ 🌶 :hot_pepper:​ 😧 :anguished:​ 👿 :imp:​ 🌭 :sneezing_face:​ 😲 :astonished:​ 🎃 :ack_o_lantern:​ 🍔 :hamburger:​ 🤢 :nauseated_face:​ 🍅 :tomato:​ 🍩 :doughnut:​ 🤠 :cowboy_hat_face:​ 🍊 :tangerin:​ 🥕 :carrot:​ 😵 :dizzy_face:​ 🍍 :pineapple:​ 🍌 :banana:​ 😁 :grin:​ 🍑 :peach:​ 🥑 :avocado:​ 😷 :mask:​ 🍋 :lemon:​ 💩 :poop:​ 🐴 :horse:​ 🎠 :carousel_horse:​ 🐼 :panda_face:​ 🐎 :racehorse:​ 🦄 :unicorn:​ 🐵 :sneezing_face:​ 🏇 :horse_racing:​ 🐷 :pig:​ 🐸 :frog:​ 🦊 :fox_face:​ 🐉 :dragon:​ 🤡 :clown_face:​ 🐶 :dog:​ 🐮 :COW:​ 🐔 :chicken:​ ‍","categories":[{"name":"实用工具","slug":"实用工具","permalink":"http://example.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"实用工具","slug":"实用工具","permalink":"http://example.com/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}],"author":"xuaner"},{"title":"芯动力——高质量Verilog设计","slug":"芯动力——高质量Verilog设计","date":"2022-12-03T13:06:07.000Z","updated":"2022-12-22T07:38:36.727Z","comments":true,"path":"2022/12/03/芯动力——高质量Verilog设计/","link":"","permalink":"http://example.com/2022/12/03/%E8%8A%AF%E5%8A%A8%E5%8A%9B%E2%80%94%E2%80%94%E9%AB%98%E8%B4%A8%E9%87%8FVerilog%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"高质量verilog设计可综合语句 always if-else case assign if语句if-else​语句映射为多路选择器 不同的if-else​结构会导致不同的电路结构，根据约束不同，设计：先加法器后选择器；先选择器后加法器 加法器的面积比选择器大，但是先加法器后选择器的延时小。 ​ 单独的if-else​语句没有优先级，会逐一检查，多个if​语句之间具有优先级，多个选择器之间级联，最后一级具有最高优先级。 ​ 若某些设计中，有些信号要求先到达（如关键使能信号、选择信号等），而有些信号需要后到达（如慢速信号、有效时间较长的信号等），此时侧需要使用if…if…结构。设计方法：最高优先级给最迟到达的关键信号 case语句case​和单if​语句类似，但是case​语句互斥 case​的使用注意点： 要在always​块里使用，如果是用always​块描述组合逻辑，注意括号里的敏感变量列表都是电平触发，并且赋值时都要用阻塞赋值“&#x3D;”： always​块里的变量必须声明成reg类型，当然声明成reg​类型不代表一定会综合成寄存器，只是语法要求always​块里要这样； always​：块描述组合逻辑时，用*​可以代表所有always​块内敏感信号； 分支条件要写全，最好补齐default​缺省条件，不然在组合逻辑中可能会由于条件不全导致出现锁存器Latch​； Latch语句综合工具很难解释Latch​ latch​由电平触发，非同步控制。在使能信号有效时latch​相当于通路，在使能信号无效时latch​保持输出状态。DFF​由时钟沿触发同步制。 latch​容易产生毛刺，DFF​则不易产生毛刺。 latch​将静态时序分析变得极为复杂。 Latch​容易在不完备的if-else​和case​中产生 使用完备if-else​语句 使用default​覆盖case​语句 查看综合工具的warning​信息 使用full_case​，告诉综合工具case​已经完备 ​ 使用parallel_case​，告诉综合工具，所有条件互斥且并行，没有优先权 ​ 资源重复利用负载均衡、逻辑复制 资源共享、减小面积 ​ 顺序重排、降低延时 ​ 赋值语句关于assign​： 仅用于信号连接 难以阅读，且多层嵌套后很难被综合器解释 可综合风格always​敏感信号表 所有的组合逻辑或锁存的always​结构必须有敏感信号列表。这个敏感信号列表必须包含所有的输入信号。 综合过程将产生一个取决于除敏感列表中所有其它值的结构，它将可能在行为仿真和门级仿真间产生潜在的失配。 在综合过程中，每个Verilog always​敏感信号列表只能对应一个时钟。 这是将每一个过程限制在单一寄存器类型的要求。 wait​和delay​不能用于可综合RTL​设计 原因：从RTL​级转换到gate​级的综合工具一般都不支持Wait​声明和#delay​声明，为了有效的综合，这些语句应该避免。 例外：在不需要行综合的行为模块中，如测试模块Testbench​、表示行为的虚拟器件模块中可以使用。 非阻塞赋值和阻塞赋值 在时序电路中必须使用非阻塞赋值&lt;=​ 组合逻辑电路必须使用阻塞赋值=​ 异步逻辑和同步逻辑 建议分开异步逻辑与同步逻辑 避免综合时的问题，简化约束和编码难度。 不可应用于非综合模块中（例如：总线模块，总线监视器或是模拟模块）除非他们被设计来综合仿真。 控制逻辑和存储器 建议控制逻辑和存储器逻辑分成独立的模块 便于高层的存储器模块的使用和便于重新描述为不同的存储器类型 优秀的设计 牢记并理解可综合“四大法宝”所对应的硬件结构 写前确认电路指标是什么：性能？面积？ 硬件思维方式，代码不再是一行行的代码而是一块一块的硬件模块 对所需实现的硬件电路“胸有成竹”，有足够的数电基础 降低延时尽可能将延时高的模块放在后面 RTL编码面积减小设计面积： 成本降低、功耗降低 特别是对于FPGA​的设计，直接决着FPGA​的选型 估计设计使用资源的数量，知道设计中哪些部分占用了较大的面积 触发器的数量有功能决定，很难减少，面积则很好估计 组合逻辑—》RTL​代码—》各种操作符 必须使用复杂运算符，需要考虑能否使用资源共享。 多比特操作，应该看一看这个信号的所有比特是否都需要参与操作，如果不是则可以只对需要的部分比特进行操作。 ​ addr&lt;=addr+32;​—》addr[7:5]&lt;=addr[7:5]+1;​ addr[4:0]&lt;=addr[4:0]+0;​ RTL编码功耗$$p_d&#x3D;∑afCV^2$$ pd是电路割点功耗总和，a是该点电路翻转次数，f是电路工作频率，C是该点电容，V表示电压值 RTL​无法改变负载电容、工作电压，只能考虑尽可能降低电路翻转频率 主要措施： 门控时钟 增加使能信号，使得部分电路只有在需要工作时才工作； 对芯片各个模块进行控制，在需要工作时才工作； 除了有用信号和时钟的翻转会消耗功耗组合逻辑产生的毛刺也会大量消耗功耗。但是，毛刺在设计中无法避免，因此，只有尽量减少毛刺在电路中的传播，才可以减少功耗。即，在设计中，尽量把产生毛刺的电路放在传播路径的最后。另外，可以使用一些减少毛刺的技术。 ‍ RTL编码布线 但即使使用最好的布局工具，还是可能出现无法布通的情况。 如果可以在RTL​编码阶段考虑代码可能对布线产生的影响就可能避免最后出现无法布通的情况 RTL设计指导原则指导原则： 面积与速度互换 乒乓操作 流水线设计","categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"Verilog","slug":"Verilog","permalink":"http://example.com/tags/Verilog/"}],"author":"xuaner"},{"title":"Pandas技巧","slug":"Pandas技巧","date":"2022-12-01T11:21:58.000Z","updated":"2022-12-01T11:39:01.061Z","comments":true,"path":"2022/12/01/Pandas技巧/","link":"","permalink":"http://example.com/2022/12/01/Pandas%E6%8A%80%E5%B7%A7/","excerpt":"","text":"差集12#取df_data1和df_data2的差集，剩下df_data1的余差df_data3=pd.concat([df_data1,df_data2,df_data2]).drop_duplicates(keep=False) 掩膜12345#取a列和b列相等的行df_data2=df_data1[df_data1[&#x27;a&#x27;]==df_data1[&#x27;b&#x27;]]#取a列不为null的行df_data2=df_data1[df_data1[&#x27;a&#x27;].notna()] 替换值12#将a列的元素为 （null） 替换为空df_data1.loc[:,&#x27;a&#x27;]=df_data1.loc[:,&#x27;a&#x27;].replace(&#x27;(null)&#x27;,np.nan)","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"pandas","slug":"pandas","permalink":"http://example.com/tags/pandas/"},{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"author":"xuaner"},{"title":"TCL入门","slug":"TCL语法快速上手","date":"2022-11-27T14:35:27.000Z","updated":"2022-12-03T12:04:08.701Z","comments":true,"path":"2022/11/27/TCL语法快速上手/","link":"","permalink":"http://example.com/2022/11/27/TCL%E8%AF%AD%E6%B3%95%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/","excerpt":"","text":"变量123456789101112131415161718#置换变量set a &#x27;snow&#x27;puts $a #打印a的值#命令置换#[]内部是一个独立tcl语句set a [expr 3+4]puts $a#结果为7#转义字符puts &#x27;a\\tb&#x27;puts &#x27;a\\nb&#x27;#添加后缀puts $&#123;a&#125;_1#打印7_1 符号123456789#置换set x 1set Y 2puts &quot;\\t[expr $x + $Y]&quot;#打印3,&quot;&quot;中会置换命令和变量puts &#123;\\t[expr $x + $Y]&#125;#打印\\t[expr $x + $Y],&#123;&#125;中的内容当做普通字符 数组1234567891011#定义set cell_1(a_name) &quot;array_1&quot;set cell_1(b_name) &quot;array_2&quot;set cell_1(c_name) &quot;array_3&quot;#取值puts $cell_1(a_name)array size cell_1#打印 3,数组长度为3array names cell_1#打印a_name,b_name,c_name 列表1234567891011121314151617181920212223242526272829303132333435set ive_list&#123;liv1,liv2,liv3&#125;puts $ive_list#合并列表set list1&#123;l1,l2,l3&#125;set list2&#123;s1,s2,s3&#125;concat $list1 $list2#查看长度llength $list1llength [concat $list1 $list1]#返回index的元素,下标从0开始lindex $list1 1#打印l2#得到list1&#123;a,b,c,d,e&#125;的最后一个元素set list1 &#123;a,b,c,d,e&#125;lindex $list1 [expr [llength list1] -1]#末尾追加新元素set list1 &#123;a,b,c&#125;lappend list1 d#排序,默认按照ASICC码排列set list1 &#123;c,d,e,a,b&#125;lsort $list1set list1 &#123;1.0,1.2,0.3,0.1,0&#125;lsort -real $list1#按照浮点数排列set list1 &#123;a,a,e,e,c,c,b,b,d&#125;lsort -unique $list1#排序并唯一化元素 运算表达式1234567#求运算表达式的值expr 1 + 2expr 1 * 2expr 5/2.0#打印浮点数,2.5expr 5/2#打印整数,2 ‍流程控制** 1234567891011121314151617181920212223242526272829303132333435363738#if elseset a 3set b 2if &#123;$a &gt; $b&#125; &#123;puts $a&#125; else &#123;puts $b&#125;#打印2#foreachset list1 &#123;1,2,3&#125;foreach i $list1&#123;puts $i&#125;#打印1,2,3#break,continueset list1 &#123;3,2,1&#125;foreach i $list1&#123;if &#123;$i==2&#125; &#123;break/continue&#125;puts $i&#125;#whileset i 3while &#123;$i&gt;0&#125; &#123;puts $iincr i-1; #等效于 set i [expr $i-1]&#125;#forfor &#123;set i 3&#125; &#123;$i&gt;0&#125; &#123;incr i-1&#125; &#123;puts $i&#125; proc函数1234567891011121314151617#过程函数procproc add &#123;a b&#125; &#123;set sum [expr $a + $b]return $sum&#125;add 3 4#打印7#过程中使用global引用全局变量set a 1proc sample &#123;x&#125; &#123;global aset a [expr $a + 1]return [expr $a + $x]&#125;sample 3#打印5 正则表达式 符号 功能 * 零次或多次 + 一次或多次 ？ 零次或一次 ^ 匹配字符串开头 $ 匹配字符串结尾 \\s 表示空格 . 匹配任意一个字符 \\w 匹配一个字符 \\d 匹配一个数字 文本处理1234567891011121314#open,gets,close#只读模式#第一行开始逐行读取#关闭文件set inputFiles [open file.text r]while &#123;[gets $inputFiles line] &gt;=0&#125; &#123;puts &quot;$line&quot;&#125;close $inputsFiles#写入模式set outputFiles [open file.text w]puts $outputFiles &quot;hello world&quot;close $outputFiles 文本file.txt,读取内容求所有Slack的值之和 Slack &#x3D; -0.0051 Slack &#x3D; -0.0021 Slack &#x3D; -0.0012 12345678910set num 0set $inputFiles [open file.txt r]while &#123;[gets $inputFiles line] &gt;=0&#125; &#123;if &#123;[regexp &#123;^Slack\\s+=\\s+(-?\\d+.?\\d+)&#125;$line total slack]&#125; &#123;set num [expr $sum + $slack]&#125;&#125;close $inputFilesputs $sum ‍Synopsys TCL1234567891011121314151617181920#查看design中的portget_ports portsName#通配符查看get_ports *#查看以C开头的portget_ports C*#查看design中对应的cell的instanceget_cells cellsName#查看design中对应的netget_nets netsName#查看nets的个数llength [get_object_name[get_nets *]]#或者sizeof_collection[get_nets *]#查看pins,以Z开头get_pins */Z","categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"},{"name":"静态时序分析","slug":"数字IC/静态时序分析","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"TCL","slug":"TCL","permalink":"http://example.com/tags/TCL/"},{"name":"静态时序分析","slug":"静态时序分析","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/"}],"author":"xuaner"},{"title":"FIFO","slug":"FIFO","date":"2022-11-27T12:39:03.000Z","updated":"2022-12-04T12:23:28.928Z","comments":true,"path":"2022/11/27/FIFO/","link":"","permalink":"http://example.com/2022/11/27/FIFO/","excerpt":"","text":"FIFOFIFO（First In First Out）是一种数据缓冲器 异步FIFO同步FIFO可以看做异步FIFO的一个特例 异步FIFO可以分为 写时钟域地址管理 读时钟域地址管理 读时钟域读地址到写时钟域的格雷码同步 写时钟域写地址到读时钟域的格雷码同步 写时钟域的满和将满信号的产生 读时钟域的空和将空信号的产生 格雷码 避免采样时钟问题 引入格雷码，格雷码相邻地址只有1bit​跳变 格雷码的原理:从右往左，每2位异或 0000​-&gt;0000​ 0010​​-&gt;0011​​ 123456789101112131415161718192021222324//以FIFO深度16,格雷码编解码情况核心代码//编码always@(posedge clka or posedge reset) if(reset) b&lt;=4&#x27;b00; else b&lt;=a^(a&gt;&gt;1);//异步采样always@(posedge clka or posedge reset) if(reset) c&lt;=4&#x27;b00; else c&lt;=b;//解码always@(posedge clka or posedge reset) if(reset) d&lt;=4&#x27;b00; else begin d[3]=c[3]; d[2]=c[3]^c[2]; d[1]=c[2]^c[1]; d[0]=c[1]^c[0]; end 注意，先将clka​时钟的地址Gray​编码，然后用b​时钟采样Gray​编码地址并暂存，最后用b​时钟对暂存的Gray​编码地址进行译码。 省略b​时钟采样暂存的Gray​编&#x2F;解码是没有任何意义的。 FIFO深度吞吐量相同满足 (A&#x2F;B) * f1&#x3D;(Y&#x2F;X) * f2 深度计算公式 fifo_depth&#x3D;data_length-(data_length&#x2F;f1) * [(Y&#x2F;X) * f2] ‍","categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"FIFO","slug":"FIFO","permalink":"http://example.com/tags/FIFO/"}],"author":"xuaner"},{"title":"测试博客","slug":"测试","date":"2022-11-26T12:41:21.000Z","updated":"2022-11-26T12:45:18.908Z","comments":true,"path":"2022/11/26/测试/","link":"","permalink":"http://example.com/2022/11/26/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"第一篇测试博客","categories":[{"name":"测试","slug":"测试","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"测试区","slug":"测试区","permalink":"http://example.com/tags/%E6%B5%8B%E8%AF%95%E5%8C%BA/"}],"author":"xuaner"}],"categories":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/"},{"name":"常见器件","slug":"数字IC/常见器件","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/%E5%B8%B8%E8%A7%81%E5%99%A8%E4%BB%B6/"},{"name":"实用工具","slug":"实用工具","permalink":"http://example.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"静态时序分析","slug":"数字IC/静态时序分析","permalink":"http://example.com/categories/%E6%95%B0%E5%AD%97IC/%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/"},{"name":"测试","slug":"测试","permalink":"http://example.com/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"Verilog","slug":"Verilog","permalink":"http://example.com/tags/Verilog/"},{"name":"常见器件","slug":"常见器件","permalink":"http://example.com/tags/%E5%B8%B8%E8%A7%81%E5%99%A8%E4%BB%B6/"},{"name":"时序","slug":"时序","permalink":"http://example.com/tags/%E6%97%B6%E5%BA%8F/"},{"name":"实用工具","slug":"实用工具","permalink":"http://example.com/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"pandas","slug":"pandas","permalink":"http://example.com/tags/pandas/"},{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"TCL","slug":"TCL","permalink":"http://example.com/tags/TCL/"},{"name":"静态时序分析","slug":"静态时序分析","permalink":"http://example.com/tags/%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/"},{"name":"FIFO","slug":"FIFO","permalink":"http://example.com/tags/FIFO/"},{"name":"测试区","slug":"测试区","permalink":"http://example.com/tags/%E6%B5%8B%E8%AF%95%E5%8C%BA/"}]}